
Segway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002c4  080002c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002c4  080002c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000102c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002c8  080002c8  000102c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000004  080002d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080002d0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001949  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062e  00000000  00000000  00021975  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013aaf  00000000  00000000  00022310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020a3  00000000  00000000  00035dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c3c  00000000  00000000  00037e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9a9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000053c  00000000  00000000  000b9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080002ac 	.word	0x080002ac

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080002ac 	.word	0x080002ac

08000104 <main>:

int a = 0;
int b = 0;

int main(void)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000108:	4b22      	ldr	r3, [pc, #136]	; (8000194 <main+0x90>)
 800010a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800010c:	4b21      	ldr	r3, [pc, #132]	; (8000194 <main+0x90>)
 800010e:	2101      	movs	r1, #1
 8000110:	430a      	orrs	r2, r1
 8000112:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~(0b11 << GPIO_MODER_MODE8_Pos);
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	681a      	ldr	r2, [r3, #0]
 800011a:	23a0      	movs	r3, #160	; 0xa0
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	491e      	ldr	r1, [pc, #120]	; (8000198 <main+0x94>)
 8000120:	400a      	ands	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0b10 << GPIO_MODER_MODE8_Pos; 	// PA8: Alternate function
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	0289      	lsls	r1, r1, #10
 8000132:	430a      	orrs	r2, r1
 8000134:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= 2 << GPIO_AFRH_AFSEL8_Pos; 	// PA8: AF2 (TIM1_CH1)
 8000136:	23a0      	movs	r3, #160	; 0xa0
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800013c:	23a0      	movs	r3, #160	; 0xa0
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	2102      	movs	r1, #2
 8000142:	430a      	orrs	r2, r1
 8000144:	625a      	str	r2, [r3, #36]	; 0x24

	TIM1->CCER = TIM_CCER_CC1E;			// CC1: Compare enabled
 8000146:	4b15      	ldr	r3, [pc, #84]	; (800019c <main+0x98>)
 8000148:	2201      	movs	r2, #1
 800014a:	621a      	str	r2, [r3, #32]
	TIM1->PSC = 15;
 800014c:	4b13      	ldr	r3, [pc, #76]	; (800019c <main+0x98>)
 800014e:	220f      	movs	r2, #15
 8000150:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 0xFFFF;
 8000152:	4b12      	ldr	r3, [pc, #72]	; (800019c <main+0x98>)
 8000154:	4a12      	ldr	r2, [pc, #72]	; (80001a0 <main+0x9c>)
 8000156:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CR1 = TIM_CR1_CEN;
 8000158:	4b10      	ldr	r3, [pc, #64]	; (800019c <main+0x98>)
 800015a:	2201      	movs	r2, #1
 800015c:	601a      	str	r2, [r3, #0]
	for(;;) {
		TIM1->CNT = 0;
 800015e:	4b0f      	ldr	r3, [pc, #60]	; (800019c <main+0x98>)
 8000160:	2200      	movs	r2, #0
 8000162:	625a      	str	r2, [r3, #36]	; 0x24
		while(TIM1->CNT < 3000){
 8000164:	e004      	b.n	8000170 <main+0x6c>
			a++;
 8000166:	4b0f      	ldr	r3, [pc, #60]	; (80001a4 <main+0xa0>)
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	1c5a      	adds	r2, r3, #1
 800016c:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <main+0xa0>)
 800016e:	601a      	str	r2, [r3, #0]
		while(TIM1->CNT < 3000){
 8000170:	4b0a      	ldr	r3, [pc, #40]	; (800019c <main+0x98>)
 8000172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000174:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <main+0xa4>)
 8000176:	4293      	cmp	r3, r2
 8000178:	d9f5      	bls.n	8000166 <main+0x62>
		}
		while(TIM1->CNT < 10000){
 800017a:	e004      	b.n	8000186 <main+0x82>
					b++;
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <main+0xa8>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	1c5a      	adds	r2, r3, #1
 8000182:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <main+0xa8>)
 8000184:	601a      	str	r2, [r3, #0]
		while(TIM1->CNT < 10000){
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <main+0x98>)
 8000188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800018a:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <main+0xac>)
 800018c:	4293      	cmp	r3, r2
 800018e:	d9f5      	bls.n	800017c <main+0x78>
		TIM1->CNT = 0;
 8000190:	e7e5      	b.n	800015e <main+0x5a>
 8000192:	46c0      	nop			; (mov r8, r8)
 8000194:	40021000 	.word	0x40021000
 8000198:	fffcffff 	.word	0xfffcffff
 800019c:	40012c00 	.word	0x40012c00
 80001a0:	0000ffff 	.word	0x0000ffff
 80001a4:	20000020 	.word	0x20000020
 80001a8:	00000bb7 	.word	0x00000bb7
 80001ac:	20000024 	.word	0x20000024
 80001b0:	0000270f 	.word	0x0000270f

080001b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80001b8:	e7fe      	b.n	80001b8 <NMI_Handler+0x4>

080001ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001ba:	b580      	push	{r7, lr}
 80001bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001be:	e7fe      	b.n	80001be <HardFault_Handler+0x4>

080001c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001c4:	46c0      	nop			; (mov r8, r8)
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}

080001ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001ca:	b580      	push	{r7, lr}
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001ce:	46c0      	nop			; (mov r8, r8)
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001d8:	f000 f832 	bl	8000240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001dc:	46c0      	nop			; (mov r8, r8)
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e6:	46c0      	nop			; (mov r8, r8)
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	f7ff fff7 	bl	80001e2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f823 	bl	8000264 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800021e:	f7ff ff71 	bl	8000104 <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000230:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000234:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000238:	2000002c 	.word	0x2000002c

0800023c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_IRQHandler>
	...

08000240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <HAL_IncTick+0x1c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	001a      	movs	r2, r3
 800024a:	4b05      	ldr	r3, [pc, #20]	; (8000260 <HAL_IncTick+0x20>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	18d2      	adds	r2, r2, r3
 8000250:	4b03      	ldr	r3, [pc, #12]	; (8000260 <HAL_IncTick+0x20>)
 8000252:	601a      	str	r2, [r3, #0]
}
 8000254:	46c0      	nop			; (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	20000000 	.word	0x20000000
 8000260:	20000028 	.word	0x20000028

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	2600      	movs	r6, #0
 8000268:	4d0c      	ldr	r5, [pc, #48]	; (800029c <__libc_init_array+0x38>)
 800026a:	4c0d      	ldr	r4, [pc, #52]	; (80002a0 <__libc_init_array+0x3c>)
 800026c:	1b64      	subs	r4, r4, r5
 800026e:	10a4      	asrs	r4, r4, #2
 8000270:	42a6      	cmp	r6, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	2600      	movs	r6, #0
 8000276:	f000 f819 	bl	80002ac <_init>
 800027a:	4d0a      	ldr	r5, [pc, #40]	; (80002a4 <__libc_init_array+0x40>)
 800027c:	4c0a      	ldr	r4, [pc, #40]	; (80002a8 <__libc_init_array+0x44>)
 800027e:	1b64      	subs	r4, r4, r5
 8000280:	10a4      	asrs	r4, r4, #2
 8000282:	42a6      	cmp	r6, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	00b3      	lsls	r3, r6, #2
 800028a:	58eb      	ldr	r3, [r5, r3]
 800028c:	4798      	blx	r3
 800028e:	3601      	adds	r6, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	00b3      	lsls	r3, r6, #2
 8000294:	58eb      	ldr	r3, [r5, r3]
 8000296:	4798      	blx	r3
 8000298:	3601      	adds	r6, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	46c0      	nop			; (mov r8, r8)
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
