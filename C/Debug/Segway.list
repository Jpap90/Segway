
Segway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002e4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a0  080003a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a0  080003a0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003a0  080003a0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a0  080003a0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a0  080003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003a4  080003a4  000103a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003a8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080003ac  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003ac  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001939  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000062e  00000000  00000000  00021965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00021f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013aaf  00000000  00000000  00022300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020e3  00000000  00000000  00035daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081c3c  00000000  00000000  00037e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000053c  00000000  00000000  000b9b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000388 	.word	0x08000388

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08000388 	.word	0x08000388

08000104 <main>:
#include "stm32g0xx.h"

int c = 0;

int main(void)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000108:	4b58      	ldr	r3, [pc, #352]	; (800026c <main+0x168>)
 800010a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800010c:	4b57      	ldr	r3, [pc, #348]	; (800026c <main+0x168>)
 800010e:	2101      	movs	r1, #1
 8000110:	430a      	orrs	r2, r1
 8000112:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~(0b11 << GPIO_MODER_MODE4_Pos);
 8000114:	23a0      	movs	r3, #160	; 0xa0
 8000116:	05db      	lsls	r3, r3, #23
 8000118:	681a      	ldr	r2, [r3, #0]
 800011a:	23a0      	movs	r3, #160	; 0xa0
 800011c:	05db      	lsls	r3, r3, #23
 800011e:	4954      	ldr	r1, [pc, #336]	; (8000270 <main+0x16c>)
 8000120:	400a      	ands	r2, r1
 8000122:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0b01 << GPIO_MODER_MODE4_Pos;
 8000124:	23a0      	movs	r3, #160	; 0xa0
 8000126:	05db      	lsls	r3, r3, #23
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	23a0      	movs	r3, #160	; 0xa0
 800012c:	05db      	lsls	r3, r3, #23
 800012e:	2180      	movs	r1, #128	; 0x80
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	430a      	orrs	r2, r1
 8000134:	601a      	str	r2, [r3, #0]

	GPIOA->MODER &= ~(0b11 << GPIO_MODER_MODE0_Pos);
 8000136:	23a0      	movs	r3, #160	; 0xa0
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	681a      	ldr	r2, [r3, #0]
 800013c:	23a0      	movs	r3, #160	; 0xa0
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	2103      	movs	r1, #3
 8000142:	438a      	bics	r2, r1
 8000144:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0b01 << GPIO_MODER_MODE0_Pos;
 8000146:	23a0      	movs	r3, #160	; 0xa0
 8000148:	05db      	lsls	r3, r3, #23
 800014a:	681a      	ldr	r2, [r3, #0]
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	2101      	movs	r1, #1
 8000152:	430a      	orrs	r2, r1
 8000154:	601a      	str	r2, [r3, #0]
	//zum einschalten: GPIOA->ODR |= 1 << 0;
	//zum auschalten: GPIOA->ODR &= ~(1 << 0);

	GPIOA->MODER &= ~(0b11 << GPIO_MODER_MODE1_Pos);
 8000156:	23a0      	movs	r3, #160	; 0xa0
 8000158:	05db      	lsls	r3, r3, #23
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	23a0      	movs	r3, #160	; 0xa0
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	210c      	movs	r1, #12
 8000162:	438a      	bics	r2, r1
 8000164:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0b01 << GPIO_MODER_MODE1_Pos;
 8000166:	23a0      	movs	r3, #160	; 0xa0
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	23a0      	movs	r3, #160	; 0xa0
 800016e:	05db      	lsls	r3, r3, #23
 8000170:	2104      	movs	r1, #4
 8000172:	430a      	orrs	r2, r1
 8000174:	601a      	str	r2, [r3, #0]
	//zum einschalten: GPIOA->ODR |= 1 << 1;
	//zum auschalten: GPIOA->ODR &= ~(1 << 1);

	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8000176:	4b3d      	ldr	r3, [pc, #244]	; (800026c <main+0x168>)
 8000178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800017a:	4b3c      	ldr	r3, [pc, #240]	; (800026c <main+0x168>)
 800017c:	2101      	movs	r1, #1
 800017e:	430a      	orrs	r2, r1
 8000180:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER &= ~(0b11 << GPIO_MODER_MODE8_Pos);
 8000182:	23a0      	movs	r3, #160	; 0xa0
 8000184:	05db      	lsls	r3, r3, #23
 8000186:	681a      	ldr	r2, [r3, #0]
 8000188:	23a0      	movs	r3, #160	; 0xa0
 800018a:	05db      	lsls	r3, r3, #23
 800018c:	4939      	ldr	r1, [pc, #228]	; (8000274 <main+0x170>)
 800018e:	400a      	ands	r2, r1
 8000190:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= 0b10 << GPIO_MODER_MODE8_Pos; 	// PA8: Alternate function
 8000192:	23a0      	movs	r3, #160	; 0xa0
 8000194:	05db      	lsls	r3, r3, #23
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	23a0      	movs	r3, #160	; 0xa0
 800019a:	05db      	lsls	r3, r3, #23
 800019c:	2180      	movs	r1, #128	; 0x80
 800019e:	0289      	lsls	r1, r1, #10
 80001a0:	430a      	orrs	r2, r1
 80001a2:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[1] |= 2 << GPIO_AFRH_AFSEL8_Pos; 	// PA8: AF2 (TIM1_CH1)
 80001a4:	23a0      	movs	r3, #160	; 0xa0
 80001a6:	05db      	lsls	r3, r3, #23
 80001a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001aa:	23a0      	movs	r3, #160	; 0xa0
 80001ac:	05db      	lsls	r3, r3, #23
 80001ae:	2102      	movs	r1, #2
 80001b0:	430a      	orrs	r2, r1
 80001b2:	625a      	str	r2, [r3, #36]	; 0x24

	RCC->APBENR2 |= RCC_APBENR2_TIM1EN;
 80001b4:	4b2d      	ldr	r3, [pc, #180]	; (800026c <main+0x168>)
 80001b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80001b8:	4b2c      	ldr	r3, [pc, #176]	; (800026c <main+0x168>)
 80001ba:	2180      	movs	r1, #128	; 0x80
 80001bc:	0109      	lsls	r1, r1, #4
 80001be:	430a      	orrs	r2, r1
 80001c0:	641a      	str	r2, [r3, #64]	; 0x40
	TIM1->CCMR1 = 0 << TIM_CCMR1_CC1S_Pos |			// CC1: output
 80001c2:	4b2d      	ldr	r3, [pc, #180]	; (8000278 <main+0x174>)
 80001c4:	2260      	movs	r2, #96	; 0x60
 80001c6:	619a      	str	r2, [r3, #24]
       		       0b110 << TIM_CCMR1_OC1M_Pos;		// CC1: PWM mode 1
	TIM1->CCER = TIM_CCER_CC1E;						// CC1: Compare enabled
 80001c8:	4b2b      	ldr	r3, [pc, #172]	; (8000278 <main+0x174>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	621a      	str	r2, [r3, #32]
	TIM1->PSC = 0;
 80001ce:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <main+0x174>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 800;								// 1/20 kHz @ 16 MHz
 80001d4:	4b28      	ldr	r3, [pc, #160]	; (8000278 <main+0x174>)
 80001d6:	22c8      	movs	r2, #200	; 0xc8
 80001d8:	0092      	lsls	r2, r2, #2
 80001da:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 400;						// Tastverhaeltnis 25 %
 80001dc:	4b26      	ldr	r3, [pc, #152]	; (8000278 <main+0x174>)
 80001de:	22c8      	movs	r2, #200	; 0xc8
 80001e0:	0052      	lsls	r2, r2, #1
 80001e2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->BDTR |= TIM_BDTR_MOE;
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <main+0x174>)
 80001e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80001e8:	4b23      	ldr	r3, [pc, #140]	; (8000278 <main+0x174>)
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	0209      	lsls	r1, r1, #8
 80001ee:	430a      	orrs	r2, r1
 80001f0:	645a      	str	r2, [r3, #68]	; 0x44
	TIM1->CR1 = TIM_CR1_CEN;
 80001f2:	4b21      	ldr	r3, [pc, #132]	; (8000278 <main+0x174>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	601a      	str	r2, [r3, #0]

	RCC->APBENR1 |= RCC_APBENR1_TIM3EN;
 80001f8:	4b1c      	ldr	r3, [pc, #112]	; (800026c <main+0x168>)
 80001fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80001fc:	4b1b      	ldr	r3, [pc, #108]	; (800026c <main+0x168>)
 80001fe:	2102      	movs	r1, #2
 8000200:	430a      	orrs	r2, r1
 8000202:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->PSC = 15;
 8000204:	4b1d      	ldr	r3, [pc, #116]	; (800027c <main+0x178>)
 8000206:	220f      	movs	r2, #15
 8000208:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 0xFFFF; // 0,5 s @ 16 MHz
 800020a:	4b1c      	ldr	r3, [pc, #112]	; (800027c <main+0x178>)
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <main+0x17c>)
 800020e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CR1 = TIM_CR1_CEN;
 8000210:	4b1a      	ldr	r3, [pc, #104]	; (800027c <main+0x178>)
 8000212:	2201      	movs	r2, #1
 8000214:	601a      	str	r2, [r3, #0]
	for(;;) {
		GPIOA->ODR |= 1 << 4;			//Handshake = 1
 8000216:	23a0      	movs	r3, #160	; 0xa0
 8000218:	05db      	lsls	r3, r3, #23
 800021a:	695a      	ldr	r2, [r3, #20]
 800021c:	23a0      	movs	r3, #160	; 0xa0
 800021e:	05db      	lsls	r3, r3, #23
 8000220:	2110      	movs	r1, #16
 8000222:	430a      	orrs	r2, r1
 8000224:	615a      	str	r2, [r3, #20]
		while(TIM3->CNT < 3000){
 8000226:	e004      	b.n	8000232 <main+0x12e>
			c = TIM3->CNT;
 8000228:	4b14      	ldr	r3, [pc, #80]	; (800027c <main+0x178>)
 800022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800022c:	001a      	movs	r2, r3
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <main+0x180>)
 8000230:	601a      	str	r2, [r3, #0]
		while(TIM3->CNT < 3000){
 8000232:	4b12      	ldr	r3, [pc, #72]	; (800027c <main+0x178>)
 8000234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <main+0x184>)
 8000238:	4293      	cmp	r3, r2
 800023a:	d9f5      	bls.n	8000228 <main+0x124>
		}
		GPIOA->ODR &= ~(1 << 4);		//Handshake = 0
 800023c:	23a0      	movs	r3, #160	; 0xa0
 800023e:	05db      	lsls	r3, r3, #23
 8000240:	695a      	ldr	r2, [r3, #20]
 8000242:	23a0      	movs	r3, #160	; 0xa0
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2110      	movs	r1, #16
 8000248:	438a      	bics	r2, r1
 800024a:	615a      	str	r2, [r3, #20]
		while(TIM3->CNT < 10000){
 800024c:	e004      	b.n	8000258 <main+0x154>
			c = TIM3->CNT;
 800024e:	4b0b      	ldr	r3, [pc, #44]	; (800027c <main+0x178>)
 8000250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000252:	001a      	movs	r2, r3
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <main+0x180>)
 8000256:	601a      	str	r2, [r3, #0]
		while(TIM3->CNT < 10000){
 8000258:	4b08      	ldr	r3, [pc, #32]	; (800027c <main+0x178>)
 800025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800025c:	4a0b      	ldr	r2, [pc, #44]	; (800028c <main+0x188>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d9f5      	bls.n	800024e <main+0x14a>
		}
		TIM3->CNT = 0;
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <main+0x178>)
 8000264:	2200      	movs	r2, #0
 8000266:	625a      	str	r2, [r3, #36]	; 0x24
		GPIOA->ODR |= 1 << 4;			//Handshake = 1
 8000268:	e7d5      	b.n	8000216 <main+0x112>
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	40021000 	.word	0x40021000
 8000270:	fffffcff 	.word	0xfffffcff
 8000274:	fffcffff 	.word	0xfffcffff
 8000278:	40012c00 	.word	0x40012c00
 800027c:	40000400 	.word	0x40000400
 8000280:	0000ffff 	.word	0x0000ffff
 8000284:	20000020 	.word	0x20000020
 8000288:	00000bb7 	.word	0x00000bb7
 800028c:	0000270f 	.word	0x0000270f

08000290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <NMI_Handler+0x4>

08000296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029a:	e7fe      	b.n	800029a <HardFault_Handler+0x4>

0800029c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80002a0:	46c0      	nop			; (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b4:	f000 f832 	bl	800031c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002be:	b580      	push	{r7, lr}
 80002c0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c8:	480d      	ldr	r0, [pc, #52]	; (8000300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80002cc:	f7ff fff7 	bl	80002be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d0:	480c      	ldr	r0, [pc, #48]	; (8000304 <LoopForever+0x6>)
  ldr r1, =_edata
 80002d2:	490d      	ldr	r1, [pc, #52]	; (8000308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002d4:	4a0d      	ldr	r2, [pc, #52]	; (800030c <LoopForever+0xe>)
  movs r3, #0
 80002d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d8:	e002      	b.n	80002e0 <LoopCopyDataInit>

080002da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002de:	3304      	adds	r3, #4

080002e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e4:	d3f9      	bcc.n	80002da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <LoopForever+0x16>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ec:	e001      	b.n	80002f2 <LoopFillZerobss>

080002ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f0:	3204      	adds	r2, #4

080002f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f4:	d3fb      	bcc.n	80002ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002f6:	f000 f823 	bl	8000340 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80002fa:	f7ff ff03 	bl	8000104 <main>

080002fe <LoopForever>:

LoopForever:
  b LoopForever
 80002fe:	e7fe      	b.n	80002fe <LoopForever>
  ldr   r0, =_estack
 8000300:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000308:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800030c:	080003a8 	.word	0x080003a8
  ldr r2, =_sbss
 8000310:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000314:	20000028 	.word	0x20000028

08000318 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000318:	e7fe      	b.n	8000318 <ADC1_IRQHandler>
	...

0800031c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000320:	4b05      	ldr	r3, [pc, #20]	; (8000338 <HAL_IncTick+0x1c>)
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	001a      	movs	r2, r3
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <HAL_IncTick+0x20>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	18d2      	adds	r2, r2, r3
 800032c:	4b03      	ldr	r3, [pc, #12]	; (800033c <HAL_IncTick+0x20>)
 800032e:	601a      	str	r2, [r3, #0]
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	20000000 	.word	0x20000000
 800033c:	20000024 	.word	0x20000024

08000340 <__libc_init_array>:
 8000340:	b570      	push	{r4, r5, r6, lr}
 8000342:	2600      	movs	r6, #0
 8000344:	4d0c      	ldr	r5, [pc, #48]	; (8000378 <__libc_init_array+0x38>)
 8000346:	4c0d      	ldr	r4, [pc, #52]	; (800037c <__libc_init_array+0x3c>)
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	42a6      	cmp	r6, r4
 800034e:	d109      	bne.n	8000364 <__libc_init_array+0x24>
 8000350:	2600      	movs	r6, #0
 8000352:	f000 f819 	bl	8000388 <_init>
 8000356:	4d0a      	ldr	r5, [pc, #40]	; (8000380 <__libc_init_array+0x40>)
 8000358:	4c0a      	ldr	r4, [pc, #40]	; (8000384 <__libc_init_array+0x44>)
 800035a:	1b64      	subs	r4, r4, r5
 800035c:	10a4      	asrs	r4, r4, #2
 800035e:	42a6      	cmp	r6, r4
 8000360:	d105      	bne.n	800036e <__libc_init_array+0x2e>
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	00b3      	lsls	r3, r6, #2
 8000366:	58eb      	ldr	r3, [r5, r3]
 8000368:	4798      	blx	r3
 800036a:	3601      	adds	r6, #1
 800036c:	e7ee      	b.n	800034c <__libc_init_array+0xc>
 800036e:	00b3      	lsls	r3, r6, #2
 8000370:	58eb      	ldr	r3, [r5, r3]
 8000372:	4798      	blx	r3
 8000374:	3601      	adds	r6, #1
 8000376:	e7f2      	b.n	800035e <__libc_init_array+0x1e>
 8000378:	080003a0 	.word	0x080003a0
 800037c:	080003a0 	.word	0x080003a0
 8000380:	080003a0 	.word	0x080003a0
 8000384:	080003a4 	.word	0x080003a4

08000388 <_init>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr

08000394 <_fini>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr
